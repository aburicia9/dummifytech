openapi: 3.0.0
info:
  title: Dummifytech
  version: 1.0.0
servers:
  - url: http://localhost:8000
components:
  securitySchemes:
    apikeyAuth:
      type: http
      scheme: apikey
tags:
  - name: USERS
  - name: USERS > ADMIN
  - name: USERS > MODERATOR
  - name: USERS > NORMAL
  - name: POSTS
  - name: POSTS > LIKES
  - name: POSTS > REPORTS
  - name: POSTS > DISLIKES
  - name: POSTS > COMMENTS
  - name: CATEGORIES
paths:
  /users:
    get:
      tags:
        - USERS > ADMIN
      summary: List All Users
      description: As an admin user, you can list all the users.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/{userId}:
    delete:
      tags:
        - USERS > ADMIN
      summary: Delete User
      description: As an admin user, you can delete a specific user.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: userId
          in: path
          schema:
            type: integer
          required: true
          example: '4'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /login:
    post:
      tags:
        - USERS > NORMAL
      summary: Insert User Login
      description: At this endpoint, you can log in.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: prueba@prueba.com
                password: prueba
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /register:
    post:
      tags:
        - USERS > NORMAL
      summary: Insert User Register
      description: At this endpoint, you can register.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: juamsito19
                email: linon24675@klanze.com
                password: Abc1234!
                fullName: Juan Agustin Brosio
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/profile:
    get:
      tags:
        - USERS > NORMAL
      summary: List User Info
      description: The logged-in user can view their own profile.
      security:
        - apikeyAuth: []
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - USERS > NORMAL
      summary: Delete  Own User
      description: The logged-in user can delete their own profile.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/profile/avatar:
    put:
      tags:
        - USERS > NORMAL
      summary: Update avatar
      description: The logged-in user can change their avatar.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/profile/password:
    put:
      tags:
        - USERS > NORMAL
      summary: Update Password
      description: The logged-in user can change their password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                oldPassword: prueba
                newPassword: ABCabc123!
                comparePassword: ABCabc123
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/profile/fullname:
    put:
      tags:
        - USERS > NORMAL
      summary: Update Full Name
      description: The logged-in user can change their full name.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                fullName: Dani torres
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /confirm/{token}:
    get:
      tags:
        - USERS > NORMAL
      summary: Verification User
      description: >-
        When the user registers, it sends an email with a link for user
        verification.
      parameters:
        - name: token
          in: path
          schema:
            type: string
          required: true
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImhvYmVwNzI3NTdAYm5vdmVsLmNvbSIsImNvZGUiOiI2MTg0MTliZC1jYmQ1LTQ4YjQtODcxYS0zOTAzYTIyMzljYmEiLCJpYXQiOjE2OTU4MzkzMjgsImV4cCI6MTY5NTg0MTEyOH0.GJZt_tNr-pzAoR5jL-DoSCTOfcUOYlzKcsgutjLYuMc
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /recovery-password:
    put:
      tags:
        - USERS > NORMAL
      summary: Update Forget Password
      description: The user has forgotten the password and can request a new password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: juamsito19
                email: linon24675@klanze.com
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /users/myposts:
    get:
      tags:
        - USERS > NORMAL
      summary: List Owner Posts
      security:
        - apikeyAuth: []
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/1/likes:
    post:
      tags:
        - POSTS > LIKES
      summary: Insert Like
      description: The logged-in user can like a post.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{postId}/likes:
    delete:
      tags:
        - POSTS > LIKES
      summary: Delete Like
      description: The logged-in user can remove the like from a post.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: postId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{postId}/report:
    post:
      tags:
        - POSTS > REPORTS
      summary: Insert Report
      description: The logged-in user can report a post.
      requestBody:
        content: {}
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: postId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{postId}/allreport:
    delete:
      tags:
        - POSTS > REPORTS
      summary: Delete Report
      description: The logged-in user can delete the report of the post.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: postId
          in: path
          schema:
            type: integer
          required: true
          example: '11'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /reports:
    get:
      tags:
        - POSTS > REPORTS
      summary: List All Reports
      description: >-
        The user with the moderator role can view all the posts/comments that
        have been reported.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{postId}/dislikes:
    post:
      tags:
        - POSTS > DISLIKES
      summary: Insert Dislike
      description: The logged-in user can dislike a post.
      requestBody:
        content: {}
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: postId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - POSTS > DISLIKES
      summary: Delete Dislike
      description: The logged-in user can delete the report of the post.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: postId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/1/comments:
    post:
      tags:
        - POSTS > COMMENTS
      summary: Insert Comment
      description: The logged-in user can leave a comment on a post.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                commentId: 1
                comment: Apuaaa que tal
                userId: 1
                postId: 1
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{postId}/comments/{commentId}:
    delete:
      tags:
        - POSTS > COMMENTS
      summary: Delete Comment
      description: The logged-in user can delete their own comment.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: postId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
        - name: commentId
          in: path
          schema:
            type: integer
          required: true
          example: '101'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - POSTS > COMMENTS
      summary: Update Comment
      description: The logged-in user can edit their own comment.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                comment: Esto es otrrrrrrro coment
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: postId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
        - name: commentId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{postId}/comments:
    get:
      tags:
        - POSTS > COMMENTS
      summary: List Post Comments
      description: The logged-in user can view the comments on a post.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: postId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts:
    get:
      tags:
        - POSTS
      summary: List All Post
      description: From the home, you will be able to see all the posts.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/insert:
    post:
      tags:
        - POSTS
      summary: Insert Create Post
      description: The logged-in user can create posts.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: asdasd
                post: asdasdasdasd
                categoryId: 2
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{postId}:
    delete:
      tags:
        - POSTS
      summary: Delete Post
      description: The logged-in user can delete their own post.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: postId
          in: path
          schema:
            type: integer
          required: true
          example: '11'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - POSTS
      summary: Update Post
      description: The logged-in user can edit their own post.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                post: Estoy actualizando el post
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: postId
          in: path
          schema:
            type: integer
          required: true
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - POSTS
      summary: Get Post by ID
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: postId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /:
    get:
      tags:
        - POSTS
      summary: List Post Aleatorio
      description: The anonymous user can only view a random post.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /categories:
    get:
      tags:
        - CATEGORIES
      summary: List All Categories
      description: The logged-in user can view all the categories.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /categories/insert:
    post:
      tags:
        - CATEGORIES
      summary: Insert Categories
      description: >-
        The regular user can request new categories, and the moderator user can
        create them.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                categoryId: 1
                name: prueba
                description: ' fjdkhsbv '
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /categories/{categoryId}:
    put:
      tags:
        - CATEGORIES
      summary: Update Categories
      description: The moderator user can edit a category.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"name\": \"caca\",\r\n    \"description\": \"hola\",\r\n\r\n}"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: categoryId
          in: path
          schema:
            type: integer
          required: true
          example: '19'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - CATEGORIES
      summary: Delete Categories
      description: The moderator user can delete categories.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: categoryId
          in: path
          schema:
            type: integer
          required: true
          example: '19'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /categories/request:
    post:
      tags:
        - CATEGORIES
      summary: Insert Req New Catgory
      description: The logged-in user can make requests for new categories.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                categoryName: tumama
                categoryReason: porque esta re buena y me encanta
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - CATEGORIES
      summary: List Req Catgory
      description: >-
        The moderator user can view a list of requests for new categories to
        process
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /categories/request/{requestCategoryId}:
    put:
      tags:
        - CATEGORIES
      summary: Update Req Category
      description: The moderator can manage requests for new categories.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                statusReq: 0
                accepted: 0
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: requestCategoryId
          in: path
          schema:
            type: integer
          required: true
          example: '3'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /posts/{categoryId}:
    get:
      tags:
        - CATEGORIES
      summary: List post with category
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{dummifyToken}}'
        - name: categoryId
          in: path
          schema:
            type: integer
          required: true
          example: '13'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}